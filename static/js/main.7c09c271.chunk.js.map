{"version":3,"sources":["api/api.ts","api/posts.ts","components/Loader/Loader.tsx","components/PostItem/PostItem.tsx","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostComment/PostComment.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","baseUrl","a","fetch","response","json","Loader","className","PostItem","post","onSelectPostId","isPostOpen","selectedPostId","id","userId","title","type","cn","onClick","PostsList","selectedUserId","useState","posts","setPosts","useEffect","getDataFromServer","dataFromServer","visiblePosts","useMemo","filter","length","map","getPostComments","postId","createComment","newComment","method","headers","body","JSON","stringify","NewCommentForm","handleAddComment","initialState","name","email","initialError","setNewComment","newCommentError","setNewCommentError","handleInput","useCallback","event","target","value","prev","onSubmit","preventDefault","trim","validComment","Object","values","every","item","validErrors","some","placeholder","onChange","PostComment","comment","handleDeleteComment","PostDetails","details","setDetails","comments","setComments","isCommentsVisible","setIsCommentVisible","commentLoading","setCommentLoading","getDetailsFromServer","Promise","all","detailsFromServer","commentsFromServer","handleCommentVisible","createdComment","newComments","deleteId","commentId","filteredComments","App","setSelectedUser","setSelectedPostId","handleSelectUser","String","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c09c271.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const request = async (baseUrl: string) => {\n  const response = await fetch(baseUrl);\n\n  return response.json();\n};\n\nexport const getUserPosts = () => request(`${BASE_URL}/posts`);\n\nexport const getPostDetails = (postId: number) => request(`${BASE_URL}/posts/${postId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport './PostItem.scss';\nimport cn from 'classnames';\n\ntype Props = {\n  post: Post;\n  onSelectPostId: (x: number) => void;\n  selectedPostId: number | null;\n};\n\nexport const PostItem: React.FC<Props> = ({\n  post,\n  onSelectPostId,\n  selectedPostId,\n}) => {\n  const onButtonClick = () => {\n    onSelectPostId(post.id);\n  };\n\n  const isPostOpen = selectedPostId === post.id;\n\n  return (\n    <li className=\"PostItem\">\n      <div>\n        <b>{`[User #${post.userId}]: `}</b>\n        {post.title}\n      </div>\n      <button\n        type=\"button\"\n        className={cn(\n          'PostItem__button', 'button',\n          {\n            'PostItem__user-button': isPostOpen,\n          },\n        )}\n        onClick={onButtonClick}\n      >\n        {isPostOpen ? 'Close' : 'Open'}\n      </button>\n    </li>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { PostItem } from '../PostItem/PostItem';\nimport './PostsList.scss';\n\ntype Props = {\n  selectedUserId: number;\n  onSelectPostId: (x: number) => void;\n  selectedPostId: number | null;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId,\n  onSelectPostId,\n  selectedPostId,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    const getDataFromServer = async () => {\n      const dataFromServer = await getUserPosts();\n\n      setPosts(dataFromServer);\n    };\n\n    getDataFromServer();\n  }, []);\n\n  const visiblePosts = useMemo(() => {\n    return (selectedUserId === 0)\n      ? posts\n      : posts.filter(post => post.userId === selectedUserId);\n  }, [selectedUserId, posts]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul\n        className=\"PostsList__list\"\n        data-cy=\"postDetails\"\n      >\n        {posts.length > 0 ? (\n          visiblePosts.map(post => (\n            <PostItem\n              key={post.id}\n              post={post}\n              onSelectPostId={onSelectPostId}\n              selectedPostId={selectedPostId}\n            />\n          ))\n        ) : <Loader />}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\nimport { request } from './posts';\n\nexport const getPostComments = (postId: number) => request(`${BASE_URL}/comments?postId=${postId}`);\n\nexport const createComment = async (newComment: NewComment) => {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n\n  return response.json();\n};\n\nexport const deletePostComment = (commentId: number) => {\n  fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n};\n","import React, {\n  ChangeEvent,\n  FormEvent,\n  useCallback,\n  useState,\n} from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number;\n  handleAddComment: (x: NewComment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  handleAddComment,\n}) => {\n  const initialState = {\n    postId: selectedPostId,\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const initialError = {\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [newComment, setNewComment] = useState(initialState);\n  const [newCommentError, setNewCommentError] = useState(initialError);\n\n  const handleInput = useCallback((\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { value, name } = event.target;\n\n    setNewComment(prev => ({ ...prev, [name]: value, postId: selectedPostId }));\n  }, [selectedPostId, newComment]);\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    setNewCommentError({ ...initialError });\n\n    if (!newComment.name.trim()) {\n      setNewCommentError(prev => ({ ...prev, name: 'Enter title!' }));\n    }\n\n    if (!newComment.body.trim()) {\n      setNewCommentError(prev => ({ ...prev, body: 'Enter comment!' }));\n    }\n\n    if (!newComment.email.trim()) {\n      setNewCommentError(prev => ({ ...prev, email: 'Enter email!' }));\n    }\n\n    const validComment = Object.values(newComment).every(item => item);\n    const validErrors = Object.values(newCommentError).some(item => item);\n\n    if (validComment && validErrors) {\n      handleAddComment(newComment);\n      setNewComment(initialState);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={handleInput}\n          value={newComment.name}\n        />\n        {newCommentError.name && (\n          <p className=\"error-message\">{newCommentError.name}</p>\n        )}\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={handleInput}\n          value={newComment.email}\n        />\n        {newCommentError.email && (\n          <p className=\"error-message\">{newCommentError.email}</p>\n        )}\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={handleInput}\n          value={newComment.body}\n        />\n        {newCommentError.body && (\n          <p className=\"error-message\">{newCommentError.body}</p>\n        )}\n\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './PostComment.scss';\n\ntype Props = {\n  comment: PostComment;\n  handleDeleteComment: (x: number) => void;\n};\n\nexport const PostComment: React.FC<Props> = ({\n  comment,\n  handleDeleteComment,\n}) => {\n  return (\n    <li\n      className=\"PostDetails__list-item\"\n    >\n      <button\n        type=\"button\"\n        className=\"PostDetails__remove-button button\"\n        onClick={() => handleDeleteComment(comment.id)}\n      >\n        X\n      </button>\n      <p>{comment.body}</p>\n    </li>\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport { getPostDetails } from '../../api/posts';\nimport {\n  createComment,\n  deletePostComment,\n  getPostComments,\n} from '../../api/comments';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { PostComment } from '../PostComment/PostComment';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPostId,\n}) => {\n  const [details, setDetails] = useState<Post | null>(null);\n  const [comments, setComments] = useState<PostComment[]>([]);\n  const [isCommentsVisible, setIsCommentVisible] = useState(true);\n  const [commentLoading, setCommentLoading] = useState(false);\n\n  const getDetailsFromServer = useCallback(async () => {\n    const [detailsFromServer, commentsFromServer] = await Promise.all([\n      getPostDetails(selectedPostId),\n      getPostComments(selectedPostId),\n    ]);\n\n    await setDetails(detailsFromServer);\n    await setComments(commentsFromServer);\n    setCommentLoading(false);\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    setDetails(null);\n    setComments([]);\n    getDetailsFromServer();\n  }, [selectedPostId]);\n\n  const handleCommentVisible = useCallback(() => {\n    setIsCommentVisible(prev => !prev);\n  }, []);\n\n  const handleAddComment = useCallback(async (newComment: NewComment) => {\n    setCommentLoading(true);\n    const createdComment = await createComment(newComment);\n    const newComments = await [...comments, createdComment];\n\n    setComments(newComments);\n    setCommentLoading(false);\n  }, [comments]);\n\n  const handleDeleteComment = useCallback(async (deleteId: number) => {\n    setCommentLoading(true);\n    await deletePostComment(deleteId);\n    const filteredComments = [...comments].filter(\n      comment => comment.id !== deleteId,\n    );\n\n    setComments(filteredComments);\n    setCommentLoading(false);\n  }, [comments]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {details ? (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{details.body}</p>\n          </section>\n\n          {(comments.length > 0) && (\n            <section\n              data-cy=\"postDetails\"\n              className=\"PostDetails__comments\"\n            >\n              <button\n                onClick={handleCommentVisible}\n                type=\"button\"\n                className=\"button\"\n              >\n                {`${isCommentsVisible ? 'Hide' : 'Show'} ${comments.length} comment${comments.length > 1 ? 's' : ''}`}\n              </button>\n\n              {isCommentsVisible && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map(comment => (\n                    <PostComment\n                      key={comment.id}\n                      comment={comment}\n                      handleDeleteComment={handleDeleteComment}\n                    />\n                  ))}\n                </ul>\n              )}\n            </section>\n          )}\n\n          {commentLoading && <Loader />}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                selectedPostId={selectedPostId}\n                handleAddComment={handleAddComment}\n              />\n            </div>\n          </section>\n        </>\n      ) : <Loader />}\n    </div>\n  );\n};\n","import React, { ChangeEvent, useCallback, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  const handleSelectUser = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const { value } = event.target;\n\n      setSelectedUser(+value);\n    }, [],\n  );\n\n  const onSelectPostId = useCallback((value: number) => {\n    setSelectedPostId(value === selectedPostId ? null : value);\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={String(selectedUserId)}\n            onChange={handleSelectUser}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            onSelectPostId={onSelectPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}