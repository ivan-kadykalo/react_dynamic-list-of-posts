{"version":3,"sources":["api/api.ts","api/posts.ts","components/Loader/Loader.tsx","components/PostItem/PostItem.tsx","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostComment/PostComment.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","baseUrl","a","fetch","response","json","getPostComments","postId","createComment","newComment","method","headers","body","JSON","stringify","Loader","className","PostItem","post","onSelectPostId","isPostOpen","selectedPostId","id","userId","title","type","cn","onClick","PostsList","selectedUserId","useState","posts","setPosts","useEffect","getDataFromServer","dataFromServer","visiblePosts","useMemo","filter","length","map","NewCommentForm","handleAddComment","initialState","name","email","setNewComment","handleInput","event","target","value","prev","onSubmit","preventDefault","placeholder","onChange","required","PostComment","comment","handleDeleteComment","PostDetails","postDetails","setPostDetails","isCommentsVisible","setIsCommentVisible","commentLoading","setCommentLoading","getDetailsFromServer","Promise","all","details","comments","handleCommentVisible","useCallback","deleteId","commentId","commentsLength","App","setSelectedUser","setSelectedPostId","handleSelect","String","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e441fd8b.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nconst request = async (baseUrl: string) => {\n  const response = await fetch(baseUrl);\n\n  return response.json();\n};\n\nexport const getUserPosts = () => request(`${BASE_URL}/posts`);\n\nexport const getPostDetails = (postId: number) => request(`${BASE_URL}/posts/${postId}`);\n\nexport const getPostComments = (postId: number) => request(`${BASE_URL}/comments?postId=${postId}`);\n\nexport const createComment = (newComment: NewComment) => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n\nexport const deletePostComment = (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport './PostItem.scss';\nimport cn from 'classnames';\n\ntype Props = {\n  post: Post;\n  onSelectPostId: (x: number) => void;\n  selectedPostId: number | null;\n};\n\nexport const PostItem: React.FC<Props> = ({\n  post,\n  onSelectPostId,\n  selectedPostId,\n}) => {\n  const onButtonClick = () => {\n    onSelectPostId(post.id);\n  };\n\n  const isPostOpen = selectedPostId === post.id;\n\n  return (\n    <li className=\"PostItem\">\n      <div>\n        <b>{`[User #${post.userId}]: `}</b>\n        {post.title}\n      </div>\n      <button\n        type=\"button\"\n        className={cn(\n          'PostItem__button', 'button',\n          {\n            'PostItem__user-button': isPostOpen,\n          },\n        )}\n        onClick={onButtonClick}\n      >\n        {isPostOpen ? 'Close' : 'Open'}\n      </button>\n    </li>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { PostItem } from '../PostItem/PostItem';\nimport './PostsList.scss';\n\ntype Props = {\n  selectedUserId: number;\n  onSelectPostId: (x: number) => void;\n  selectedPostId: number | null;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId,\n  onSelectPostId,\n  selectedPostId,\n}) => {\n  const [posts, setPosts] = useState<Post[] | []>([]);\n\n  useEffect(() => {\n    const getDataFromServer = async () => {\n      const dataFromServer = await getUserPosts();\n\n      setPosts(dataFromServer);\n    };\n\n    getDataFromServer();\n  }, [selectedUserId]);\n\n  const visiblePosts = useMemo(() => {\n    return (selectedUserId === 0)\n      ? posts\n      : posts.filter(post => post.userId === selectedUserId);\n  }, [selectedUserId, posts]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul\n        className=\"PostsList__list\"\n        data-cy=\"postDetails\"\n      >\n        {posts.length > 0 ? (\n          visiblePosts.map(post => (\n            <PostItem\n              key={post.id}\n              post={post}\n              onSelectPostId={onSelectPostId}\n              selectedPostId={selectedPostId}\n            />\n          ))\n        ) : <Loader />}\n      </ul>\n    </div>\n  );\n};\n","import React, { ChangeEvent, FormEvent, useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number;\n  handleAddComment: (x: NewComment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  handleAddComment,\n}) => {\n  const initialState = {\n    postId: selectedPostId,\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [newComment, setNewComment] = useState(initialState);\n\n  const handleInput = (\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { value, name } = event.target;\n\n    setNewComment(prev => ({ ...prev, [name]: value, postId: selectedPostId }));\n  };\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    handleAddComment(newComment);\n    setNewComment(initialState);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={handleInput}\n          value={newComment.name}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={handleInput}\n          value={newComment.email}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={handleInput}\n          value={newComment.body}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './PostComment.scss';\n\ntype Props = {\n  comment: PostComment;\n  handleDeleteComment: (x: number) => void;\n};\n\nexport const PostComment: React.FC<Props> = ({\n  comment,\n  handleDeleteComment,\n}) => {\n  return (\n    <li\n      className=\"PostDetails__list-item\"\n    >\n      <button\n        type=\"button\"\n        className=\"PostDetails__remove-button button\"\n        onClick={() => handleDeleteComment(comment.id)}\n      >\n        X\n      </button>\n      <p>{comment.body}</p>\n    </li>\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport {\n  createComment,\n  deletePostComment,\n  getPostComments,\n  getPostDetails,\n} from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { PostComment } from '../PostComment/PostComment';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\ntype PostDetail = {\n  details: Post;\n  comments: PostComment[];\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPostId,\n}) => {\n  const [postDetails, setPostDetails] = useState<PostDetail | null>(null);\n  const [isCommentsVisible, setIsCommentVisible] = useState(true);\n  const [commentLoading, setCommentLoading] = useState(false);\n\n  const getDetailsFromServer = async () => {\n    const [details, comments] = await Promise.all([\n      getPostDetails(selectedPostId),\n      getPostComments(selectedPostId),\n    ]);\n\n    await setPostDetails({ details, comments });\n    setCommentLoading(false);\n  };\n\n  useEffect(() => {\n    setPostDetails(null);\n    getDetailsFromServer();\n  }, [selectedPostId]);\n\n  const handleCommentVisible = useCallback(() => {\n    setIsCommentVisible(prev => !prev);\n  }, []);\n\n  const handleAddComment = async (newComment: NewComment) => {\n    setCommentLoading(true);\n    await createComment(newComment);\n    getDetailsFromServer();\n  };\n\n  const handleDeleteComment = async (deleteId: number) => {\n    setCommentLoading(true);\n    await deletePostComment(deleteId);\n    getDetailsFromServer();\n  };\n\n  const commentsLength = useMemo(() => {\n    return postDetails ? postDetails.comments.length : 0;\n  }, [postDetails]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {postDetails ? (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{postDetails.details.body}</p>\n          </section>\n\n          {(commentsLength > 0) && (\n            <section\n              data-cy=\"postDetails\"\n              className=\"PostDetails__comments\"\n            >\n              <button\n                onClick={handleCommentVisible}\n                type=\"button\"\n                className=\"button\"\n              >\n                {`${isCommentsVisible ? 'Hide' : 'Show'} ${commentsLength} comment${commentsLength > 1 ? 's' : ''}`}\n              </button>\n\n              {isCommentsVisible && (\n                <ul className=\"PostDetails__list\">\n                  {postDetails.comments.map(comment => (\n                    <PostComment\n                      key={comment.id}\n                      comment={comment}\n                      handleDeleteComment={handleDeleteComment}\n                    />\n                  ))}\n                </ul>\n              )}\n            </section>\n          )}\n\n          {commentLoading && <Loader />}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                selectedPostId={selectedPostId}\n                handleAddComment={handleAddComment}\n              />\n            </div>\n          </section>\n        </>\n      ) : <Loader />}\n    </div>\n  );\n};\n","import React, { ChangeEvent, useCallback, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  const handleSelect = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectedUser(+value);\n  }, []);\n\n  const onSelectPostId = useCallback((value: number) => {\n    setSelectedPostId(value === selectedPostId ? null : value);\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={String(selectedUserId)}\n            onChange={handleSelect}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            onSelectPostId={onSelectPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n\n// Пункт номер 9, створити метод getPost\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}